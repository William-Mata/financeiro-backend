stages:
  - build
  - test
  - package
  - deploy

variables:
  DOTNET_VERSION: "8.0"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  IMAGE_TAG: "$CI_REGISTRY_IMAGE:latest"

build:
  stage: build
  image: mcr.microsoft.com/dotnet/sdk:$DOTNET_VERSION
  script:
    - dotnet restore
    - dotnet build --configuration Release --no-restore
  artifacts:
    paths:
      - "**/bin/"
      - "**/obj/"
    expire_in: 1 hour
  tags:
    - docker

test:
  stage: test
  image: mcr.microsoft.com/dotnet/sdk:$DOTNET_VERSION
  dependencies:
    - build
  script:
    - dotnet test --configuration Release --no-build --verbosity normal
  tags:
    - docker

# UTILIZANDO DOCKER IN DOCKER - NÃO MUITO RECOMENDADO
# package:
#   stage: package
#   image: docker:24.0.5
#   services:
#     - docker:24.0.5-dind
#   dependencies:
#     - test
#   before_script:
#     - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
#   script:
#     - docker build -t $IMAGE_TAG .
#     - docker push $IMAGE_TAG
#   only:
#     - main
#   tags:
#     - docker

# UTILIZANDO KANIKO - MAIS RECOMENDADO
package:
  stage: package
  image: 
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  dependencies:
    - test
  before_script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
  script:
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $IMAGE_TAG --cache=true --cache-ttl=168h --verbosity=info
  only:
    - main
  tags:
    - docker

## Acessando o servidor via SSH para deploy
# deploy:
#   stage: deploy
#   image: alpine:latest
#   dependencies:
#     - package
#   before_script:
#     - apk add --no-cache openssh-client curl
#     - eval $(ssh-agent -s)
#     - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
#     - mkdir -p ~/.ssh
#     - chmod 700 ~/.ssh
#     - ssh-keyscan -p 2222 -H $SERVER_HOST >> ~/.ssh/known_hosts
#   script:
#     - |
#       ssh -p 2222 $SERVER_USER@$SERVER_HOST "
#         cd /srv/docker/composes/financeiro-backend/ &&
#         echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY &&
#         docker compose pull &&
#         docker compose down || true &&
#         docker compose up -d
#       "
#     - sleep 10
#     - ssh -p 2222 $SERVER_USER@$SERVER_HOST "curl -f http://localhost:5000/health"
#   environment:
#     name: production
#     url: http://$SERVER_HOST:5000
#   only:
#     - main
#   #descomentar a linha abaixo para deploy manual.
#   #when: manual
#   tags:
#     - docker


# Deploy diretamente do gitlab runner quando está no mesmo servidor da aplicação.
deploy:
  stage: deploy
  image: alpine:latest
  dependencies:
    - package
  script:
    - ls
    - cd /srv/docker/composes/financeiro-backend/ &&
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY &&
    - docker compose pull &&
    - docker compose down || true &&
    - docker compose up -d
  
  environment:
    name: production
    url: http://$SERVER_HOST:5000
  only:
    - main
  #descomentar a linha abaixo para deploy manual.
  #when: manual
  tags:
    - docker



